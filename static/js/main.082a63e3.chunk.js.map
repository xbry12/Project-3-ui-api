{"version":3,"sources":["Modal.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","props","handleClick","e","state","modalOn","target","classList","remove","add","setState","console","log","this","onClick","className","name","modalinfo","src","flag","height","Component","App","linkJson","fetch","then","response","json","output","modals","id","modalCollection","map","showModal","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QA8CeA,G,8DAzCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAOVC,YAAc,SAACC,IACgB,IAAvB,EAAKC,MAAMC,SACXF,EAAEG,OAAOC,UAAUC,OAAO,cAC1BL,EAAEG,OAAOC,UAAUE,IAAI,YAEvB,EAAKC,SAAS,CACVL,SAAS,MAKbF,EAAEG,OAAOC,UAAUC,OAAO,YAC1BL,EAAEG,OAAOC,UAAUE,IAAI,cACvB,EAAKC,SAAS,CACdL,SAAS,MAnBb,EAAKD,MAAQ,CACLC,SAAS,GAJF,E,qDA6Bf,OADAM,QAAQC,IAAIC,KAAKZ,OAEb,sBAAKa,QAASD,KAAKX,YAAaa,UAAU,QAA1C,UACI,mCAAMF,KAAKZ,MAAMe,KAAjB,OACCH,KAAKZ,MAAMgB,UACZ,qBAAKC,IAAKL,KAAKZ,MAAMkB,KAAMC,OAAO,iB,GAnC9BC,cCsDLC,E,kDAnDb,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IAkBRC,YAAc,YACe,IAAvB,EAAKE,MAAMC,QAAkB,EAAKK,SAAS,CAC7CL,SAAS,IAEL,EAAKK,SAAS,CAClBL,SAAS,KApBX,EAAKD,MAAQ,CACXmB,SAAU,GACVlB,SAAS,GANM,E,8DAUDF,GAAG,IAAD,OAElBqB,MADW,wCAERC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAI,EAAKlB,SAAS,CAACa,SAASK,S,+BAe1CjB,QAAQC,IAAIC,KAAKT,MAAMmB,UACvB,IAAMM,EAAShB,KAAKT,MAAMmB,SAGtBO,EAAK,EACHC,EAAkBF,EAAOG,KAAI,SAACH,GAAD,OACjC,cAAC,EAAD,eAA2BA,GAAdC,GAAM,MAIrB,OACE,sBAAKf,UAAU,MAAf,UACGgB,EAED,gDACA,cAAC,EAAD,CAAOE,UAAWpB,KAAKT,MAAMC,iB,GA9CnBgB,aCQHa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.082a63e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Modal.css';\n\nclass Modal extends Component {\n\n    constructor(props) {\n        super(props)\n       \n        this.state = {\n                modalOn: false\n            };\n    };\n\n    handleClick = (e) => {\n        if (this.state.modalOn === true) {\n            e.target.classList.remove(\"smallModal\")\n            e.target.classList.add(\"bigModal\")\n\n            this.setState({\n                modalOn: false,\n            })\n        }\n\n        else {\n            e.target.classList.remove(\"bigModal\")\n            e.target.classList.add(\"smallModal\")\n            this.setState({\n            modalOn: true\n           })\n    }\n    }\n\n    render() {\n        console.log(this.props)\n        return (\n            <div onClick={this.handleClick} className=\"flags\">\n                <h1> {this.props.name} </h1>\n                {this.props.modalinfo}\n                <img src={this.props.flag} height=\"120px\"/>\n            \n            </div>\n\n        );\n    };\n\n};\nexport default Modal;\n\n// {/* props are used to RECEIVE information from other components */}\n","import { Component } from 'react';\nimport './App.css';\nimport Modal from './Modal.js'\n\nclass App extends Component {\n// hello!!!!\n  constructor(props) {\n    super(props)\n\n\n    this.state = {\n      linkJson: [],\n      modalOn: true\n    }\n  }\n\n  componentDidMount(e){\n    let link = 'https://restcountries.eu/rest/v2/all';\n    fetch(link)\n      .then(response => response.json())\n      .then(output => this.setState({linkJson:output}));\n    //  the place you use to store variables which needs to be sent to render is state*** \n  }\n \n\n  handleClick = () => {\n    if (this.state.modalOn === true) this.setState({\n      modalOn: false\n    })\n    else (this.setState({\n      modalOn: true\n    }))\n  }\n\n  render() {\n    console.log(this.state.linkJson)\n    const modals = this.state.linkJson\n\n  \n    let id = 0;\n    const modalCollection = modals.map((modals) => (\n      <Modal key={(id += 1)} {...modals} />\n    ));\n\n    // console.log(this.state.modalOn)\n    return (\n      <div className=\"App\" >\n        {modalCollection}\n        {/* entity that has all my modals */}\n        <h1>Modal is above</h1>\n        <Modal showModal={this.state.modalOn}/>\n        {/* <button onClick={this.handleClick}>toggle Modal</button> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}